<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Etao Tsai</title>
    <link>https://wetsocksnsleeves.github.io/etaotsai/</link>
    <description>Recent content on Etao Tsai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>etao.business.au@gmail.com (Etao Tsai)</managingEditor>
    <webMaster>etao.business.au@gmail.com (Etao Tsai)</webMaster>
    <copyright>¬© Yi-Tao Tsai, 2025</copyright>
    <lastBuildDate>Mon, 10 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://wetsocksnsleeves.github.io/etaotsai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ergonomic Split Keyboard From Scratch</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/ergonomic_split_keyboard_from_scratch/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/ergonomic_split_keyboard_from_scratch/</guid>
      <description>&lt;p&gt;&lt;strong&gt;What:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;I designed and built a custom 54 key orthlinear, column staggered split keyboard.&#xA;Managing every aspect from designing the PCB, compiling the firmware based on vial,&#xA;as well as designing and 3D printing the case with my 3D printers.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;PCB Design:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Drawing circuit schematic within KiCad. Understanding the software and the layers into PCB creation.&lt;/li&gt;&#xA;&lt;li&gt;Optimizing component position and wiring to ensure manufacturability.&lt;/li&gt;&#xA;&lt;li&gt;Using the Japanese duplex matrix to minimise the number of pins required. Simplifying component sourcing such as RJ45 sockets and a spare RP2040 mcu from previous projects.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Firmware development:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Understanding the value of creating firmware from scratch or utilise matured and existing technologies throughout project. Ultimately, using the vial firmware with easy GUI for keymaps and alterations.&lt;/li&gt;&#xA;&lt;li&gt;Understanding the structure of the vial firmware. Had to first compile the QMK firmware, requiring past knowledge of C and the ability to troubleshoot and refer to documentations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Case fabrication:&lt;/strong&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>What:</strong></p>
<p>I designed and built a custom 54 key orthlinear, column staggered split keyboard.
Managing every aspect from designing the PCB, compiling the firmware based on vial,
as well as designing and 3D printing the case with my 3D printers.</p>
<p><strong>PCB Design:</strong></p>
<ul>
<li>Drawing circuit schematic within KiCad. Understanding the software and the layers into PCB creation.</li>
<li>Optimizing component position and wiring to ensure manufacturability.</li>
<li>Using the Japanese duplex matrix to minimise the number of pins required. Simplifying component sourcing such as RJ45 sockets and a spare RP2040 mcu from previous projects.</li>
</ul>
<p><strong>Firmware development:</strong></p>
<ul>
<li>Understanding the value of creating firmware from scratch or utilise matured and existing technologies throughout project. Ultimately, using the vial firmware with easy GUI for keymaps and alterations.</li>
<li>Understanding the structure of the vial firmware. Had to first compile the QMK firmware, requiring past knowledge of C and the ability to troubleshoot and refer to documentations.</li>
</ul>
<p><strong>Case fabrication:</strong></p>
<ul>
<li>Exporting STEP model from KiCad to fusion 360. And utilising functions such as shell,
mirror and project within the tool to achieve my vision.</li>
<li>3D printed the case using heavily modified Ender 3 series printers.
All setup within my home lab and is managed via the local network using Raspberry Pi Zero Ws.</li>
</ul>
<p><strong>Result:</strong></p>
<p>A fully functional split ergonomic keyboard that required me to demonstrate my ability to:
Carry an idea from paper to reality, solving real world design challenges,
splitting a problem into a structured plan, assessing limitations in my knowledge
and utilising existing technology.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Omni - Content creation toolkit</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/omni_web_app/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/omni_web_app/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;br&gt;&#xA;When trying to move content from my phone to my computer, I&amp;rsquo;ve always felt like it was a chore.&#xA;If you don&amp;rsquo;t have a fully Apple setup, you&amp;rsquo;d have to opt for google drive and google photos.&lt;/p&gt;&#xA;&lt;p&gt;So I decided to create a web application, starting off as a local file transfer tool and expanding it to include:&#xA;Media downloader, Notes, Gif creator and much more&amp;hellip;&#xA;&lt;br&gt;&#xA;&lt;strong&gt;How&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Deno&lt;/li&gt;&#xA;&lt;li&gt;Deno Fresh&lt;/li&gt;&#xA;&lt;li&gt;Tailwindcss&lt;/li&gt;&#xA;&lt;li&gt;FFmpeg&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;br&gt;&#xA;User uploads are stored directly onto the server&amp;rsquo;s storage. The website renders the content by fetching what&amp;rsquo;s inside the storage, thumbnails and gifs are then created via FFmpeg if they are non-existent. Keeping everything clean and fast.&lt;/p&gt;&#xA;&lt;p&gt;&lt;br&gt;&#xA;Downloads are processed based on what the users selections are. Multiple selections are compressed into a zip file before download prompt, minimising user inputs and effectively improving the user experience.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;üìÅ A local file transfer system. No more sending your content onto another guy&amp;rsquo;s computer.&lt;/li&gt;&#xA;&lt;li&gt;üì∂ File upload and Download with visual prompts&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ Easy selection/deselection&lt;/li&gt;&#xA;&lt;li&gt;üñºÔ∏è Automatic thumbnail generation for both videos and images. Videos are coupled with a gif for fast preview.&lt;/li&gt;&#xA;&lt;li&gt;ü§ê Automatic zipping if downloading multiple files.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;br&gt;&#xA;Omni is going to be much more. This is just a part of it.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Why</strong><br>
When trying to move content from my phone to my computer, I&rsquo;ve always felt like it was a chore.
If you don&rsquo;t have a fully Apple setup, you&rsquo;d have to opt for google drive and google photos.</p>
<p>So I decided to create a web application, starting off as a local file transfer tool and expanding it to include:
Media downloader, Notes, Gif creator and much more&hellip;
<br>
<strong>How</strong></p>
<ul>
<li>Deno</li>
<li>Deno Fresh</li>
<li>Tailwindcss</li>
<li>FFmpeg</li>
</ul>
<p><br>
User uploads are stored directly onto the server&rsquo;s storage. The website renders the content by fetching what&rsquo;s inside the storage, thumbnails and gifs are then created via FFmpeg if they are non-existent. Keeping everything clean and fast.</p>
<p><br>
Downloads are processed based on what the users selections are. Multiple selections are compressed into a zip file before download prompt, minimising user inputs and effectively improving the user experience.
<br>
<strong>Result</strong></p>
<ul>
<li>üìÅ A local file transfer system. No more sending your content onto another guy&rsquo;s computer.</li>
<li>üì∂ File upload and Download with visual prompts</li>
<li>‚úÖ Easy selection/deselection</li>
<li>üñºÔ∏è Automatic thumbnail generation for both videos and images. Videos are coupled with a gif for fast preview.</li>
<li>ü§ê Automatic zipping if downloading multiple files.</li>
</ul>
<p><br>
Omni is going to be much more. This is just a part of it.</p>
<p><br>
<strong>Mobile upload using photos</strong></p>
<p><img src="../../images/omni/mobile_uploads.jpg" alt="Mobile Uploads"></p>
<ul>
<li>‚úÖ Multi-select is supported</li>
<li>üîÉ Uploading indicator</li>
</ul>
<p>On mobile, user can select media files from either their files, or their photos application.</p>
<p><br>
<strong>Video previews</strong>
<img src="../../images/omni/video_preview_feature.gif" alt="Video Preview Feature">
<br>
Video previews and thumbnails are done through generating both a thumbnail and a gif when files are uploaded.
The two are then overlayed and opacity is set based on hover. This greatly improves performance compared to using an embedded video file.</p>
<p><br>
<strong>Downloads</strong><br>
The user can then download their selected files on the other device. Completing the transfer process.</p>
<p><img src="../../images/omni/download_on_pc.png" alt="Download on PC"></p>
<p><br>
If multiple files are selected, the tool will automatically compress the given files into a zip. Allowing the user to download all the files at once.</p>
<p><img src="../../images/omni/save_zip_feature.png" alt="Zip feature"></p>
]]></content:encoded>
    </item>
    <item>
      <title>Henosis Todo List App</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/henosis_todo_list_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/henosis_todo_list_app/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;br&gt;&#xA;I was building react apps and was coming across alot of issues with the framework. Particularly inconvient error messages and bugs that ultimately got me nowhere. Still wanting to build a webapp for fun however, I searched online till I came across a great introduction to Next.js and decided to build something with it.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;How&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Next.js&lt;/li&gt;&#xA;&lt;li&gt;Tailwind CSS&lt;/li&gt;&#xA;&lt;li&gt;DragnDrog Module&lt;/li&gt;&#xA;&lt;li&gt;Firebase&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I build the frontend with Next.js and Tailwind. A simple todo list app consisted of looping through a list and rendering relevant html components. Making it looks good with tailwind. And then implementing drag n drop by using existing modules.&lt;br&gt;&#xA;I then connected Firebase with the application to realise OAuth and data store and retrive.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;A minimal, and reactive web app.&lt;br&gt;&#xA;I made my first ever mistake of not redacting my token, as I didn&amp;rsquo;t know anything about web apps prior to this project. So that&amp;rsquo;s one of the biggest takeaways I&amp;rsquo;ve rememberd till today.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Why</strong><br>
I was building react apps and was coming across alot of issues with the framework. Particularly inconvient error messages and bugs that ultimately got me nowhere. Still wanting to build a webapp for fun however, I searched online till I came across a great introduction to Next.js and decided to build something with it.
<br>
<strong>How</strong></p>
<ul>
<li>Next.js</li>
<li>Tailwind CSS</li>
<li>DragnDrog Module</li>
<li>Firebase</li>
</ul>
<p>I build the frontend with Next.js and Tailwind. A simple todo list app consisted of looping through a list and rendering relevant html components. Making it looks good with tailwind. And then implementing drag n drop by using existing modules.<br>
I then connected Firebase with the application to realise OAuth and data store and retrive.
<br>
<strong>Result</strong><br>
A minimal, and reactive web app.<br>
I made my first ever mistake of not redacting my token, as I didn&rsquo;t know anything about web apps prior to this project. So that&rsquo;s one of the biggest takeaways I&rsquo;ve rememberd till today.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Personal Website</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/personal_website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/personal_website/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;br&gt;&#xA;A personal website had always been on the project list, but I couldn&amp;rsquo;t find a suitable&#xA;stack to get started. My past experiences building web apps include using react, and frameworks like&#xA;Next.js.&lt;br&gt;&#xA;Seeing that a personal website contains mainly static content, and maybe a blog section.&#xA;I felt like it would be using the wrong tool for the job. Until I came across Hugo.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;How&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hugo&lt;/li&gt;&#xA;&lt;li&gt;CSS&lt;/li&gt;&#xA;&lt;li&gt;HTML&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I started by reading the Hugo documentations, setting up the environments and learning out the structures worked.&#xA;I like to get my hands dirty, so I picked out a theme and started reading the structure. After abit, I understood the&#xA;way Hugo works and started heavily modifying the theme &amp;ldquo;Bearcub&amp;rdquo;.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Revamped the structure, and colors&lt;/li&gt;&#xA;&lt;li&gt;Added animations, social icons, and a custom home page&lt;/li&gt;&#xA;&lt;li&gt;Added features like embedded pdfs, and gallery view&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I would ideally use tailwind CSS since that&amp;rsquo;s what I am familiar with, but this experience allowed me to refresh my memory on CSS&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Why</strong><br>
A personal website had always been on the project list, but I couldn&rsquo;t find a suitable
stack to get started. My past experiences building web apps include using react, and frameworks like
Next.js.<br>
Seeing that a personal website contains mainly static content, and maybe a blog section.
I felt like it would be using the wrong tool for the job. Until I came across Hugo.
<br>
<strong>How</strong></p>
<ul>
<li>Hugo</li>
<li>CSS</li>
<li>HTML</li>
</ul>
<p>I started by reading the Hugo documentations, setting up the environments and learning out the structures worked.
I like to get my hands dirty, so I picked out a theme and started reading the structure. After abit, I understood the
way Hugo works and started heavily modifying the theme &ldquo;Bearcub&rdquo;.
<br>
<strong>Result</strong></p>
<ul>
<li>Revamped the structure, and colors</li>
<li>Added animations, social icons, and a custom home page</li>
<li>Added features like embedded pdfs, and gallery view</li>
</ul>
<p>I would ideally use tailwind CSS since that&rsquo;s what I am familiar with, but this experience allowed me to refresh my memory on CSS</p>
]]></content:encoded>
    </item>
    <item>
      <title>Algorithmic Optimisations and Pathfinding</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/algorithmic_optimisations_and_pathfinding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/algorithmic_optimisations_and_pathfinding/</guid>
      <description>&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Optimising algorithms for space and time efficiency. Implemented many data structures such as&#xA;bitvectors, bloomfilters, queues, stack, and maps within ideal space and time efficiency.&lt;/li&gt;&#xA;&lt;li&gt;Solved various programming problems such as k-mer combinations, chain reactions, and graph problems with theoretical efficiency in mind&lt;/li&gt;&#xA;&lt;li&gt;Implemented pathfinding algorithms such as BFS and dijkstra. And using it to solve graph related problems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;Understanding the use cases of data structures, how to implement them effectively.&lt;br&gt;&#xA;Studying the relationship between empirical and theoretical efficiency.&#xA;Studying various foundational programming problems, their place in our systems and how to solve them effectively.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>What</strong></p>
<ul>
<li>Optimising algorithms for space and time efficiency. Implemented many data structures such as
bitvectors, bloomfilters, queues, stack, and maps within ideal space and time efficiency.</li>
<li>Solved various programming problems such as k-mer combinations, chain reactions, and graph problems with theoretical efficiency in mind</li>
<li>Implemented pathfinding algorithms such as BFS and dijkstra. And using it to solve graph related problems.</li>
</ul>
<p><strong>Result</strong><br>
Understanding the use cases of data structures, how to implement them effectively.<br>
Studying the relationship between empirical and theoretical efficiency.
Studying various foundational programming problems, their place in our systems and how to solve them effectively.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Image Manipulation Program via Http</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/image_manipulation_program_via_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/image_manipulation_program_via_http/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C&lt;/li&gt;&#xA;&lt;li&gt;libFreeImage&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;Implemented a multi-threaded server that listens in on a user or randomly selected port for TCP traffic,&#xA;validates it if it&amp;rsquo;s a valid HTTP request, parses the image, performs user determined manipulation on said image,&#xA;and sends it back to the user&amp;rsquo;s client.&lt;br&gt;&#xA;&lt;br&gt;&#xA;Implemented a user client that listens in on provided port, builds a valid HTTP request containing commands and image data. Validates response and parses the modified image. &lt;strong&gt;See at bottom right of image, showing before and after image manipulation&lt;/strong&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Tools</strong></p>
<ul>
<li>C</li>
<li>libFreeImage</li>
</ul>
<p><strong>Result</strong><br>
Implemented a multi-threaded server that listens in on a user or randomly selected port for TCP traffic,
validates it if it&rsquo;s a valid HTTP request, parses the image, performs user determined manipulation on said image,
and sends it back to the user&rsquo;s client.<br>
<br>
Implemented a user client that listens in on provided port, builds a valid HTTP request containing commands and image data. Validates response and parses the modified image. <strong>See at bottom right of image, showing before and after image manipulation</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>Intrusion Detection System</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/intrusion_detection_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/intrusion_detection_system/</guid>
      <description>&lt;p&gt;&lt;strong&gt;How&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;Scapy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Takes a series of instructions reminiscent of snort rules. Parse through a pcap file using scapy and identify suspicious packets.&#xA;Implement support for content filters, flag analysis, and time based thresholds defined within given ruleset.&lt;/p&gt;&#xA;&lt;p&gt;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;A IDS system that is able to parse and detect suspicious packets across a wide range of scenarios.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>How</strong></p>
<ul>
<li>Python</li>
<li>Scapy</li>
</ul>
<p>Takes a series of instructions reminiscent of snort rules. Parse through a pcap file using scapy and identify suspicious packets.
Implement support for content filters, flag analysis, and time based thresholds defined within given ruleset.</p>
<p><br>
<strong>Result</strong><br>
A IDS system that is able to parse and detect suspicious packets across a wide range of scenarios.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Snakes and Ladders via Atmega328 and LED Matrix</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/snakes_and_ladders_via_atmega328/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/snakes_and_ladders_via_atmega328/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;br&gt;&#xA;A snakes and ladders replica built with Atmega328 microcontroller and LED matrix + buttons for UI.&lt;/p&gt;&#xA;&lt;p&gt;Program was written in C and flashed via serial connection with Putty.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;What&lt;/strong&gt;&lt;br&gt;&#xA;Relevant knowledge included fundamental understanding of chip specifications, circuits, and C programming.&#xA;Timing, bitwise operations, and control via pins were the main components that went into this project.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;Understanding the communication between the MCU and its IOs. Exercise control via code.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Description</strong><br>
A snakes and ladders replica built with Atmega328 microcontroller and LED matrix + buttons for UI.</p>
<p>Program was written in C and flashed via serial connection with Putty.
<br>
<strong>What</strong><br>
Relevant knowledge included fundamental understanding of chip specifications, circuits, and C programming.
Timing, bitwise operations, and control via pins were the main components that went into this project.
<br>
<strong>Result</strong><br>
Understanding the communication between the MCU and its IOs. Exercise control via code.</p>
]]></content:encoded>
    </item>
    <item>
      <title>CSV Proxy Extraction Automation</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/csv_proxy_extraction_automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/csv_proxy_extraction_automation/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;br&gt;&#xA;During one of my projects, I had to utilise a series of proxies to bypass a limiter.&#xA;I got a CSV off the internet of various different proxies, but I was met with an issue.&#xA;The issue was that the interface took in a different format than what I required.&#xA;And thus, I decided to automate this manual process by writing a simple python script.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;How&lt;/strong&gt;&lt;br&gt;&#xA;I read the file and did some basic string manipulation.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;Formatted hundreds of proxies in seconds. Minutes including the scripting.&#xA;Automation via a scripting language is something that I find myself doing regularly,&#xA;and this is one of the most easily visualised examples.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Why</strong><br>
During one of my projects, I had to utilise a series of proxies to bypass a limiter.
I got a CSV off the internet of various different proxies, but I was met with an issue.
The issue was that the interface took in a different format than what I required.
And thus, I decided to automate this manual process by writing a simple python script.
<br>
<strong>How</strong><br>
I read the file and did some basic string manipulation.
<br>
<strong>Result</strong><br>
Formatted hundreds of proxies in seconds. Minutes including the scripting.
Automation via a scripting language is something that I find myself doing regularly,
and this is one of the most easily visualised examples.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Making markdown preview live with bash script</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/blog/making-markdown-preview-live-with-bash-script/</link>
      <pubDate>Sat, 18 Jan 2025 05:57:40 +1000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/blog/making-markdown-preview-live-with-bash-script/</guid>
      <description>&lt;h1 id=&#34;making-a-bash-script-that-turns-glow-into-a-live-markdown-preview-tool&#34;&gt;Making a bash script that turns glow into a live markdown preview tool&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/glow&#34;&gt;glow&lt;/a&gt; is a cli tool that allows markdown previews.But I couldn&amp;rsquo;t find any information on whether it supports live previews or not. Other tools also require browsers, which is something that I don&amp;rsquo;t want.&lt;/p&gt;&#xA;&lt;p&gt;I want something that works in the terminal and stays in the terminal.&lt;/p&gt;&#xA;&lt;h2 id=&#34;defining-my-requirements&#34;&gt;Defining my requirements&lt;/h2&gt;&#xA;&lt;p&gt;I needed something really quick and simple. My idea is to run a tmux pane on the side and have the script run glow, and re-run it if the chosen file had been changed.&lt;/p&gt;&#xA;&lt;p&gt;Not exactly a &amp;ldquo;live&amp;rdquo; preview, but it&amp;rsquo;s good enough for me. I just didn&amp;rsquo;t want to re-run glow manually everytime I change something. Is there a tool for this? Probably but I just couldn&amp;rsquo;t find it. But hey, I get to DIY!&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-process&#34;&gt;The process&lt;/h2&gt;&#xA;&lt;p&gt;I started off by thinking about python scripts. As I&amp;rsquo;ve had experience automating and writing scripts using it. It&amp;rsquo;s rich package eco-system can do basically anything I wanted it to do.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="making-a-bash-script-that-turns-glow-into-a-live-markdown-preview-tool">Making a bash script that turns glow into a live markdown preview tool</h1>
<p><a href="https://github.com/charmbracelet/glow">glow</a> is a cli tool that allows markdown previews.But I couldn&rsquo;t find any information on whether it supports live previews or not. Other tools also require browsers, which is something that I don&rsquo;t want.</p>
<p>I want something that works in the terminal and stays in the terminal.</p>
<h2 id="defining-my-requirements">Defining my requirements</h2>
<p>I needed something really quick and simple. My idea is to run a tmux pane on the side and have the script run glow, and re-run it if the chosen file had been changed.</p>
<p>Not exactly a &ldquo;live&rdquo; preview, but it&rsquo;s good enough for me. I just didn&rsquo;t want to re-run glow manually everytime I change something. Is there a tool for this? Probably but I just couldn&rsquo;t find it. But hey, I get to DIY!</p>
<h2 id="the-process">The process</h2>
<p>I started off by thinking about python scripts. As I&rsquo;ve had experience automating and writing scripts using it. It&rsquo;s rich package eco-system can do basically anything I wanted it to do.</p>
<p>But then I think it&rsquo;s overkill for this simple wrapper for glow. So I decided to make a bash script despite knowing nothing about bash script. üò±</p>
<h2 id="the-script">The script</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="cp"></span><span class="k">if</span> <span class="o">[</span> <span class="nv">$#</span> -ne <span class="m">1</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Usage: glower &lt;file.md&gt;&#34;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="nv">file</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="nv">initial_time</span><span class="o">=</span><span class="k">$(</span>stat -c %Y <span class="s2">&#34;</span><span class="nv">$file</span><span class="s2">&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nv">PANE_ID</span><span class="o">=</span><span class="k">$(</span>tmux display-message -p <span class="s1">&#39;#{pane_id}&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">clear
</span></span><span class="line"><span class="ln">12</span><span class="cl">glow <span class="s2">&#34;</span><span class="nv">$file</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="k">while</span> true<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">   <span class="nv">current_time</span><span class="o">=</span><span class="k">$(</span>stat -c %Y <span class="s2">&#34;</span><span class="nv">$file</span><span class="s2">&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">   <span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$current_time</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;</span><span class="nv">$initial_time</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">        tmux send-keys -t <span class="nv">$PANE_ID</span> C-c
</span></span><span class="line"><span class="ln">19</span><span class="cl">        clear
</span></span><span class="line"><span class="ln">20</span><span class="cl">        glow <span class="s2">&#34;</span><span class="nv">$file</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">
</span></span><span class="line"><span class="ln">22</span><span class="cl">        <span class="nv">initial_time</span><span class="o">=</span><span class="nv">$current_time</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">   <span class="k">fi</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">   sleep <span class="m">1</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="k">done</span></span></span></code></pre></div><p>The scripts works like this.</p>
<ul>
<li>If the amount of arguments is &ldquo;!=&rdquo; == &ldquo;-ne&rdquo; to one. Then print usage error</li>
<li>Save the one and only argument to a variable called file. And store the last updated time information into another variable called initial_time</li>
<li>Save the pid of the tmux pane the script is in. Clear the terminal. And launch glow</li>
<li>In a while loop. If the time information of the file has changed then <C-c> to reset everything in the pane. Incase cursor position is not neutral. Then run glow again</li>
</ul>
<h2 id="result">Result</h2>
<p>A script that does what I wanted it to has been birthed. This was my first experience with writing bash scripts and it was a step forward into doing what I&rsquo;ve always wanted to do but was scared of the syntax of bash.</p>
<p>I&rsquo;ve always loved automation and scripting to increase the quality of life. And I think I will continue to do so but now with bash + python.</p>
<p>ok bye.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Encryption and Decryption Projects</title>
      <link>https://wetsocksnsleeves.github.io/etaotsai/portfolio/encryption_and_decryption_projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://wetsocksnsleeves.github.io/etaotsai/portfolio/encryption_and_decryption_projects/</guid>
      <description>&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AES encryption and decryption via modes such as ECB, CBC, CFB, OFB and CTR.&lt;/li&gt;&#xA;&lt;li&gt;Diffie hellman key exchange&lt;/li&gt;&#xA;&lt;li&gt;RSA Encryption and decryption&lt;/li&gt;&#xA;&lt;li&gt;Packet contruction using encryption methods for ESP IPsec protocol&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;How&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;pycroptodome&lt;/li&gt;&#xA;&lt;li&gt;cryptography&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;Achieved recreating the series of encrpytion decryption methods, DF key exchange and correct packet construction for ESP.&#xA;Learnt the ways encryption and decryption methods work and the usage of relevant python libraries.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>What</strong></p>
<ul>
<li>AES encryption and decryption via modes such as ECB, CBC, CFB, OFB and CTR.</li>
<li>Diffie hellman key exchange</li>
<li>RSA Encryption and decryption</li>
<li>Packet contruction using encryption methods for ESP IPsec protocol</li>
</ul>
<p><strong>How</strong></p>
<ul>
<li>Python</li>
<li>pycroptodome</li>
<li>cryptography</li>
</ul>
<p><strong>Result</strong><br>
Achieved recreating the series of encrpytion decryption methods, DF key exchange and correct packet construction for ESP.
Learnt the ways encryption and decryption methods work and the usage of relevant python libraries.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
